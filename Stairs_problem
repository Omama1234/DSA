/* There are n stsirs , a person standing at the bottom wants to reach the top.The Person can climb either
   1 stair or 2 stairs at a time. Count the number of ways the person can reach the top.
   
   Input : n=2
   Output :2
   There are two ways :(1,1) and (2)
   
   Input : n=4
   Output :5
   (1,1,1,1),(1,1,2),(2,1,1),(1,2,1),(2,2)
*/
// Naive approach -> Using Recursion 
// T.C->O(2^n) A.S->O(1)

#include<bits/stdc++.h>

using namespace std;

int Count(int n)
{
    if(n==1||n==0)
    {

        return 1;
    }
    return Count(n-1)+Count(n-2);
}
int main()
{
    int n;
    cout<<"Enter the number of stairs ->";
    cin>>n;
    cout<<"Number of ways ->"<<Count(n)<<endl;
    return 0;
}

// Efficient Solution -> Using Dynamic Programming (Tabulation)
// T.C->O(n) and A.S->O(n)

#include<bits/stdc++.h>

using namespace std;

int Count(int n)
{
    int dp[n+1];
    dp[0]=1;
    dp[1]=1;
    for(int i=2;i<n+1;i++)
    {
        dp[i]=dp[i-1]+dp[i-2];
    }
    return dp[n];
}
int main()
{
    int n;
    cout<<"Enter the number of stairs ->";
    cin>>n;
    cout<<"Number of ways ->"<<Count(n)<<endl;
    return 0;
}
